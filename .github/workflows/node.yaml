name: NodeJS Build

on:
  push:
    branches:
      - '**'
    tags:
      - 'v**'

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Prepare environment
        run: yarn
        
      - name: Run linter
        run: yarn lint

  build-and-test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Prepare environment
        run: yarn
        
      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test

  validate-prod-dependencies:
    name: Validate production dependencies
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Prepare Environment
        run: yarn
        env:
          CI: true
      - name: Validate production dependencies
        run: |
          if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
            yarn validate:dependencies
          else
            echo "Skipping audit"
          fi
        env:
          CI: true

  dockerhub-release:
    name: Make dockerhub release
    runs-on: ubuntu-latest
    # needs: TODO - reenable this
    #   - build-and-test
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
      - name: Get the Docker tag
        id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@2b0614b1338c8f19dd9d3ea433ca9bc0cc7057ba
        with:
          remove-version-tag-prefix: false
      - name: Determine images to publish
        id: image-tags
        run: |
          IMAGES=
          DOCKER_TAG=${{ steps.docker-tag.outputs.tag }}
          # check if a release branch, or master, or a tag
          if [[ $DOCKER_TAG =~ ^release([0-9]+)$ || $DOCKER_TAG == "latest" || "${{ github.ref }}" == refs/tags/* ]]
          then
            # If we have a dockerhub image name, then setup to publish there
            if [ -z "${{ secrets.DOCKERHUB_IMAGE }}" ]
            then
              DOCKERHUB_PUBLISH="0"
            else
              DOCKERHUB_PUBLISH="1"
              IMAGES="${{ secrets.DOCKERHUB_IMAGE }}:$DOCKER_TAG"$'\n'$IMAGES
            fi
            # debug output
            echo dockerhub-publish $DOCKERHUB_PUBLISH
            echo images $IMAGES
            echo ::set-output name=images::"$IMAGES"
            echo ::set-output name=dockerhub-publish::"$DOCKERHUB_PUBLISH"
          else
            echo "Skipping docker build"
          fi
      - name: Build
        if: ${{ steps.image-tags.outputs.images }}
        run: |
          yarn install --check-files --frozen-lockfile
          yarn build
          yarn install --check-files --frozen-lockfile --production --force 
      - name: Set up Docker Buildx
        if: ${{ steps.image-tags.outputs.images }}
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: steps.image-tags.outputs.images && steps.image-tags.outputs.dockerhub-publish == '1'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        if: ${{ steps.image-tags.outputs.images }}
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.image-tags.outputs.images }}
   